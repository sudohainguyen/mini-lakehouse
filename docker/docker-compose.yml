version: '3.9'
services:
  trino-coordinator:
    image: 'trinodb/trino:latest'
    hostname: trino-coordinator
    ports:
      - '8080:8080'
    volumes:
      - ./etc:/etc/trino
    networks:
      - trino

  postgresdb:
    image: 'postgres:15.2'
    hostname: postgresdb
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: metastore_db
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    networks:
      - trino

  # hive-metastore:
  #   hostname: hive-metastore
  #   image: 'bde2020/hive-metastore-postgresql:3.1.0'
  #   ports:
  #     - '9083:9083'
  #   volumes:
  #     - ./conf/metastore-site.xml:/opt/apache-hive-metastore-3.0.0-bin/conf/metastore-site.xml:ro
  #   environment:
  #     METASTORE_DB_HOSTNAME: postgresdb
  #   depends_on:
  #     - postgresdb
  #   networks:
  #     - trino

  hive-metastore:
    hostname: hive-metastore
    image: 'starburstdata/hive:3.1.2-e.18'
    ports:
      - '9083:9083' # Metastore Thrift
    environment:
      HIVE_METASTORE_DRIVER: org.postgresql.Driver
      HIVE_METASTORE_JDBC_URL: jdbc:postgresql://postgresdb:5432/metastore_db
      HIVE_METASTORE_USER: admin
      HIVE_METASTORE_PASSWORD: admin
      HIVE_METASTORE_WAREHOUSE_DIR: s3://datalake/
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: minio
      S3_SECRET_KEY: minio123
      S3_PATH_STYLE_ACCESS: "true"
      REGION: ""
      GOOGLE_CLOUD_KEY_FILE_PATH: ""
      HIVE_METASTORE_USERS_IN_ADMIN_ROLE: "admin"
      AZURE_ADL_CLIENT_ID: ""
      AZURE_ADL_CREDENTIAL: ""
      AZURE_ADL_REFRESH_URL: ""
      AZURE_ABFS_STORAGE_ACCOUNT: ""
      AZURE_ABFS_ACCESS_KEY: ""
      AZURE_WASB_STORAGE_ACCOUNT: ""
      AZURE_ABFS_OAUTH: ""
      AZURE_ABFS_OAUTH_TOKEN_PROVIDER: ""
      AZURE_ABFS_OAUTH_CLIENT_ID: ""
      AZURE_ABFS_OAUTH_SECRET: ""
      AZURE_ABFS_OAUTH_ENDPOINT: ""
      AZURE_WASB_ACCESS_KEY: ""
    depends_on:
      - postgresdb
    networks:
      - trino

  minio:
    hostname: minio
    image: 'minio/minio:latest'
    container_name: minio
    ports:
      - "9001:9001"
      - "9000:9000"
    command: ["server", "/data", "--console-address", ":9001"]
    volumes:
      - minio-data:/data
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    networks:
      - trino

  # To Create Minio bucket and upload iris parquet file.
  mc:
    depends_on:
      - minio
    image: minio/mc
    container_name: mc
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add minio http://minio:9000 minio minio123) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc rm -r --force minio/iris;
      /usr/bin/mc rm -r --force minio/datalake;
      /usr/bin/mc mb minio/datalake;
      /usr/bin/mc policy set public minio/datalake;
      /usr/bin/mc cp /data/iris.parq minio/datalake/iris/iris.parq;
      exit 0;
      "
    networks:
      - trino
    volumes:
      - ./data/iris.parq:/data/iris.parq

  cloudbeaver:
    image: dbeaver/cloudbeaver:latest
    container_name: cloudbeaver
    # restart: always
    ports:
      - 8978:8978
    volumes:
      - cloudbeaver:/opt/cloudbeaver/workspace
    networks:
      - trino

volumes:
  minio-data:
    driver: local
  cloudbeaver:
    driver: local

networks:
  trino:
    driver: bridge
